---
version: 0.2

env:
  variables:
    TF_ZIP: https://releases.hashicorp.com/terraform/0.11.2/terraform_0.11.2_linux_amd64.zip
    TERRAFIRM_DESC_URL: https://github.com/YakDriver/terrafirm_win
    JQ_INSTALL: https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64

phases:
  install:
    commands:
      - echo "Installing unzip............"
      - apt -y install unzip
      - echo "Installing jq..............."
      - curl -L "${JQ_INSTALL}" -o jq.dms && chmod +x jq.dms
      - ./jq.dms --version
      - echo "Installing Terraform..."
      - echo `pwd`
      - curl -L "${TF_ZIP}" -o tf.zip && unzip tf.zip
      - echo "Installed Terraform."
  pre_build:
    commands:
      - #-------------------------------------------------------------------------------------------------
      - echo "Terraform version " ; ./terraform --version
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - AWS CLI named profile................................................"
      - echo "(This is distinct from the instance profile that contains a role for creating the instance."
      - echo "This profile is used by CLI.)"
      - |
        if [ -z "${NAMED_PROFILE}" ] ; then
          echo "No CLI named profile given, using default (terrafirm)..."
          NAMED_PROFILE=terrafirm ; export NAMED_PROFILE
        fi
      - |
        if [ -n "${REGION}" ] ; then
          aws configure set region "${REGION}" --profile "${NAMED_PROFILE}"
        fi
      - #Setting this environment variable gives TF all the profile info (e.g., region)
      - #Can't be set before first 'aws configure' call or CodeBuild barfs
      - AWS_PROFILE="${NAMED_PROFILE}" ; export AWS_PROFILE
      - echo "AWS CLI named profile is $AWS_PROFILE"  
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - AWS instance profile setup............................................."
      - echo "(This is distinct from the named profile used by CLI."
      - echo "This profile is to contain a role in creating the instance.)"
      - TF_VAR_instance_profile="${INSTANCE_PROFILE}" ; export TF_VAR_instance_profile
      - |
        if aws iam get-instance-profile --instance-profile-name "${INSTANCE_PROFILE}" ; then
          echo "Profile already exists. Checking instance profile..."
          OLD_ROLE="$(aws iam get-instance-profile --instance-profile-name $INSTANCE_PROFILE | ./jq.dms -r '.InstanceProfile.Roles[0].RoleName')"
          if [ -z "${OLD_ROLE}" ] ; then
            OLD_ROLE=none
          fi
          if [ "${INSTANCE_ROLE}" = "${OLD_ROLE}" ] ; then
            echo "No change to instance profile needed."
          else
            echo "Profile has wrong role - ${OLD_ROLE}. Removing role..."
            if aws iam remove-role-from-instance-profile --role-name "${OLD_ROLE}" --instance-profile-name "${INSTANCE_PROFILE}" ; then
              echo "Role removed!"
            fi
            if [ "${INSTANCE_ROLE}" != "none" ] ; then
              echo "Adding role to profile..."
              if aws iam add-role-to-instance-profile --role-name "${INSTANCE_ROLE}" --instance-profile-name "${INSTANCE_PROFILE}" ; then
                echo "Role added!"
              fi
            fi
          fi
        else
          aws iam create-instance-profile --instance-profile-name "${INSTANCE_PROFILE}"    
          if [ -n "${INSTANCE_ROLE}" ] ; then
            echo "Adding role to profile..."
            if aws iam add-role-to-instance-profile --role-name "${INSTANCE_ROLE}" --instance-profile-name "${INSTANCE_PROFILE}" ; then
              echo "Role added!"
            fi
          fi
        fi
      - exit 1
      - #-------------------------------------------------------------------------------------------------
      - TF_VAR_cb_ip="$(curl http://checkip.amazonaws.com)" ; export TF_VAR_cb_ip
      - echo "IP of CodeBuild instance is $TF_VAR_cb_ip"
      - #-------------------------------------------------------------------------------------------------
      - | #avoid errors with invalid parameter values - only will show up as "true" or "false"
        if [ "${ASSIGN_PUBLIC_IP}" = "true" ] ; then
          TF_VAR_associate_public_ip_address="${ASSIGN_PUBLIC_IP}"
        else
          TF_VAR_associate_public_ip_address="false"
        fi
      - export TF_VAR_associate_public_ip_address
      - #-------------------------------------------------------------------------------------------------
      - TF_VAR_win_security_group="${WIN_SECURITY_GRP}" ; export TF_VAR_win_security_group
      - TF_VAR_lx_security_group="${LX_SECURITY_GRP}" ; export TF_VAR_lx_security_group
      - TF_VAR_win_instance_type="${WIN_INSTANCE_TYPE}" ; export TF_VAR_win_instance_type
      - TF_VAR_lx_instance_type="${LX_INSTANCE_TYPE}" ; export TF_VAR_lx_instance_type
      - #-------------------------------------------------------------------------------------------------
      - #"Creative" variable substitution required since windows userdata has chars that won't work with automatic method
      - sed -i -e '/WATCHMAKER_INSTALL_GOES_HERE/{r windows/install_watchmaker.ps1' -e 'd}' windows/userdata.ps1
      - sed -i "s/THIS_IS_NOT_THE_PASSWORD/${TF_VAR_term_passwd}/" windows/userdata.ps1
      - sed -i "s,THIS_IS_NOT_THE_REPO,${GIT_REPO}," windows/userdata.ps1
      - sed -i "s/THIS_IS_NOT_THE_BRANCH/${GIT_BRANCH}/" windows/userdata.ps1
      - sed -i -e '/WATCHMAKER_INSTALL_GOES_HERE/{r linux/install_watchmaker.sh' -e 'd}' linux/userdata.sh
      - sed -i "s,THIS_IS_NOT_THE_REPO,${GIT_REPO}," linux/userdata.sh
      - sed -i "s/THIS_IS_NOT_THE_BRANCH/${GIT_BRANCH}/" linux/userdata.sh
      - #-------------------------------------------------------------------------------------------------
      - echo "AWS key setup..........................................................."      
      - TF_VAR_key_pair_name="${KEY_PAIR_NAME}" ; export TF_VAR_key_pair_name
      - TF_VAR_ssh_user="${SSH_USER}" ; export TF_VAR_ssh_user
      - TF_VAR_term_user="${WINRM_USER}" ; export TF_VAR_term_user
      - TF_VAR_term_passwd="$(aws ssm get-parameters --name ${PS_PASSWD_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_term_passwd
      - TF_VAR_private_key="$(aws ssm get-parameters --name ${PS_PRIVATE_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_private_key
      - TF_VAR_public_key="$(aws ssm get-parameters --name ${PS_PUBLIC_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_public_key
      - |
        if aws ec2 describe-key-pairs --key-name "${KEY_PAIR_NAME}" ; then
          echo "Key pair already exists..."
        else
          echo "Creating a key pair "
          aws ec2 import-key-pair --key-name "${KEY_PAIR_NAME}" --public-key-material "${TF_VAR_public_key}"
        fi
      - #-------------------------------------------------------------------------------------------------
      - echo "Throwing it over the fence to Terraform................................"
      - echo "Initializing Terraform " ; ./terraform init -input=false
      - echo "Importing key pair " ; ./terraform import aws_key_pair.auth "${KEY_PAIR_NAME}"
      - echo "Create provisiong plan " ; ./terraform plan -out=tfplan -input=false
  build:
    commands:
      - echo "Applying Terraform plan (which installs watchmaker) "
      - echo "NOTE, this will fail if remote execute calls fail"
      - ./terraform apply -input=false tfplan
      - #./terraform state pull -target=aws_instance.windows -input=false
      - #AWS_INSTANCE_STATE="$(./terraform state pull -target=aws_instance.windows -input=false)" ; export AWS_INSTANCE_STATE
      - #AWS_INSTANCE_ID="$(echo $AWS_INSTANCE_STATE | ./jq.dms -r '.modules[0].resources."aws_instance.windows".primary.id')" ; export AWS_INSTANCE_ID
      - #AWS_INSTANCE_IP="$(echo $AWS_INSTANCE_STATE | ./jq.dms -r '.modules[0].resources."aws_instance.windows".primary.attributes.public_ip')" ; export AWS_INSTANCE_IP
  post_build:
    commands:
      - |
        if [ "${DESTROY_AFTER_TEST}" = "true" ]; then
          echo "Destroying Terraform-created resources (e.g., security groups, instances, key pair)..."
          ./terraform destroy -input=false -force
          if aws ec2 describe-key-pairs --key-name "${KEY_PAIR_NAME}" ; then
            echo "Deleting key pair..."
            aws ec2 delete-key-pair --key-name "${KEY_PAIR_NAME}"
          fi
        else
          echo "********* WARNING *********"
          echo "NOT destroying resources!"
          echo "Expensive AWS resources are still up and running and need to be terminated/deleted manually."
          echo "***************************"
        fi
      - echo "Terrafirm completed on $(date)"
artifacts:
  files:
    - '**/*'
