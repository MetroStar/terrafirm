---
version: 0.2

env:
  variables:
    TF_ZIP: https://releases.hashicorp.com/terraform/0.11.1/terraform_0.11.1_linux_amd64.zip
    TERRAFIRM_DESC_URL: https://github.com/YakDriver/terrafirm_win
    JQ_INSTALL: https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
  parameter-store:
    SSH_KEY: "/CodeBuild/terrafirm/ssh_key"
    PUBLIC_KEY: "/CodeBuild/terrafirm/public_key"

phases:
  install:
    commands:
      - echo "Installing unzip............"
      - apt -y install unzip
      - echo "Installing jq..............."
      - curl -L "${JQ_INSTALL}" -o jq.dms && chmod +x jq.dms
      - ./jq.dms --version
      - echo "Installing Terraform..."
      - echo `pwd`
      - curl -L "${TF_ZIP}" -o tf.zip && unzip tf.zip
      - echo "Installed Terraform."
  pre_build:
    commands:
      - |
        if [ -z "${NAMED_PROFILE}" ]
        then
          echo "No named profile given, using default (terrafirm)..."
          NAMED_PROFILE=terrafirm
        else
          NAMED_PROFILE="${NAMED_PROFILE}"
        fi
        export NAMED_PROFILE
        echo "AWS profile is $NAMED_PROFILE"
      - |
        if [ -n "${REGION}" ]
        then
          aws configure set region $REGION --profile $NAMED_PROFILE
        fi
      - echo "AWS Profile setup..."
      - AWS_PROFILE=$NAMED_PROFILE ; export AWS_PROFILE
      - echo "Creating a key pair "
      - aws ec2 import-key-pair --key-name "${KEY_PAIR_NAME}" --public-key-material "${PUBLIC_KEY}"
      - echo "Terraform version " ; ./terraform --version
      - TF_VAR_key_pair_name="${KEY_PAIR_NAME}" ; export TF_VAR_key_pair_name
      - TF_VAR_private_key="${SSH_KEY}" ; export TF_VAR_private_key
      - TF_VAR_public_key="${PUBLIC_KEY}" ; export TF_VAR_public_key
      - TF_VAR_ami="${AMI}" ; export TF_VAR_ami
      - TF_VAR_ssh_user="${WINRM_USER}" ; export TF_VAR_ssh_user
      - echo "AMI ${TF_VAR_ami}"
      - echo "Initializing Terraform " ; ./terraform init -input=false
      - echo "Importing key pair " ; ./terraform import aws_key_pair.auth "${KEY_PAIR_NAME}"
      - echo "Create provisiong plan " ; ./terraform plan -out=tfplan -input=false
      - 
  build:
    commands:
      - echo "Applying Terraform plan (which installs watchmaker) "
      - echo "NOTE, this will fail if remote execute calls fail"
      - ./terraform apply -input=false tfplan
      - ./terraform state pull -target=aws_instance.windows -input=false
      - AWS_INSTANCE_STATE="$(./terraform state pull -target=aws_instance.windows -input=false)" ; export AWS_INSTANCE_STATE
      - AWS_INSTANCE_ID="$(./jq.dms '.modules[0].resources."aws_instance.windows".primary.id' $AWS_INSTANCE_STATE)" ; export AWS_INSTANCE_ID
      - AWS_INSTANCE_IP="$(./jq.dms '.modules[0].resources."aws_instance.windows".primary.attributes.public_ip' $AWS_INSTANCE_STATE)" ; export AWS_INSTANCE_IP
      - echo "Instance ID, ${AWS_INSTANCE_ID}"
      - echo "Instance IP, ${AWS_INSTANCE_IP}"
  post_build:
    commands:
      - echo "Destroying everything..."
      - ./terraform destroy -input=false -force
      - echo "Terrafirm completed on $(date)"

artifacts:
  files:
    - '**/*'
