---
version: 0.2

env:
  variables:
    TFI_TF_ZIP:             https://releases.hashicorp.com/terraform/0.11.2/terraform_0.11.2_linux_amd64.zip
    TFI__DESC_URL:          https://github.com/YakDriver/terrafirm_win
    TFI_JQ_INSTALL:         https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
    TFI_WIN_SECURITY_GRP:   "terrafirm_winrm_sg"                                   #ephermeral name for sg
    TFI_LX_SECURITY_GRP:    "terrafirm_ssh_sg"                                     #ephermeral name for sg
    TFI_KEY_PAIR_NAME:      "svc_terrafirm2"                                       #ephermeral name for keypair
    # Below here are variables that can (and likely are) overwritten from the AWS CodeBuild project
    # Values in CodeBuild take precedence so LEAVE ALL OF THESE HERE even if defining there
    TFI_PS_PASSWD_KEY:      "/path/to/parameter/store"                             #REQUIRED in CodeBuild
    TFI_PS_PRIVATE_KEY:     "/path/to/parameter/store"                             #REQUIRED in CodeBuild
    TFI_PS_PUBLIC_KEY:      "/path/to/parameter/store"                             #REQUIRED in CodeBuild
    TFI_ASSIGN_PUBLIC_IP:   "false"                                                #optional in CodeBuild
    TFI_REPO:           "https://github.com/plus3it/watchmaker.git"            #optional in CodeBuild
    TFI_BRANCH:         "master"                                               #optional in CodeBuild
    TFI_COMMON_ARGS:     "-n --log-level debug"                                 #optional in CodeBuild
    TFI_WIN_ARGS:        "--log-dir=C:\\Watchmaker\\Logs"                       #optional in CodeBuild
    TFI_LX_ARGS:         "--log-dir=/var/log/watchmaker"                        #optional in CodeBuild
    TFI_RM_USER:         "Administrator"                                        #optional in CodeBuild
    TFI_SSH_USER:           "root"                                                 #optional in CodeBuild
    TFI_DESTROY_AFTER_TEST: "true"                                                 #optional in CodeBuild
    TFI_INSTANCE_PROFILE:   ""                                                     #optional in CodeBuild
    TFI_LX_INSTANCE_TYPE:   "t2.micro"                                             #optional in CodeBuild
    TFI_WIN_INSTANCE_TYPE:  "t2.medium"                                            #optional in CodeBuild
    TFI_SUBNET_ID:          ""                                                     #optional in CodeBuild
    TFI_BUILD_WIN:          "all"                                                  #optional in CodeBuild
    TFI_BUILD_LX:           "all"                                                  #optional in CodeBuild

phases:
  install:
    commands:
      - echo "Installing unzip............"
      - apt -y install unzip
      - echo "Installing jq..............."
      - curl -L "${TFI_JQ_INSTALL}" -o jq.dms && chmod +x jq.dms
      - ./jq.dms --version
      - echo "Installing Terraform..."
      - echo `pwd`
      - curl -L "${TFI_TF_ZIP}" -o tf.zip && unzip tf.zip
      - echo "Installed Terraform."
  pre_build:
    commands:
      - #-------------------------------------------------------------------------------------------------
      - echo "Terraform version " ; ./terraform --version
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - AWS Basic Config......................................................."
      - aws configure set region "${AWS_REGION}"
      - TF_VAR_tfi_region="${AWS_REGION}" ; export TF_VAR_tfi_region
      - |
        if [ "${TFI_BUILD_WIN}" != "none" ] && [ "${TFI_BUILD_WIN}" != "one" ] ; then
          TFI_BUILD_WIN=all
        fi
      - TF_VAR_tfi_win_all_one_none="${TFI_BUILD_WIN}" ; export TF_VAR_tfi_win_all_one_none
      - |
        if [ "${TFI_BUILD_LX}" != "none" ] && [ "${TFI_BUILD_LX}" != "one" ] ; then
          TFI_BUILD_LX=all
        fi
      - TF_VAR_tfi_lx_all_one_none="${TFI_BUILD_LX}" ; export TF_VAR_tfi_lx_all_one_none
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - AWS instance profile setup............................................."
      - echo "(This is distinct from the named profile used by CLI."
      - echo "This profile is to contain a role in creating the instance.)"
      - TF_VAR_tfi_instance_profile="${TFI_INSTANCE_PROFILE}" ; export TF_VAR_tfi_instance_profile
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - AWS subnet............................................................."
      - # If subnet id is valid, finds the associated VPC and assigns variables. Otherwise, blanks (defaults)
      - TF_VAR_tfi_subnet_id=""
      - TF_VAR_tfi_vpc_id=""
      - |
        if [ -n "${TFI_SUBNET_ID}" ] ; then
          TFI_VPC_ID="$(aws ec2 describe-subnets --filters "Name=subnet-id,Values=${TFI_SUBNET_ID}" | ./jq.dms -r '.Subnets[0].VpcId')"
          if [ "${TFI_VPC_ID}" != "null" ] && [ -n "${TFI_VPC_ID}" ] ; then
            TF_VAR_tfi_subnet_id="${TFI_SUBNET_ID}"
            TF_VAR_tfi_vpc_id="${TFI_VPC_ID}"
          fi
        fi
      - export TF_VAR_tfi_subnet_id ; export TF_VAR_tfi_vpc_id
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - Misc environment variables..........................................."      
      - | #avoid TF errors caused by invalid parameter values - only values variable can have are "true" or "false"
        if [ "${TFI_ASSIGN_PUBLIC_IP}" = "true" ] ; then
          TF_VAR_tfi_associate_public_ip_address="${TFI_ASSIGN_PUBLIC_IP}"
        else
          TF_VAR_tfi_associate_public_ip_address="false"
        fi
      - export TF_VAR_tfi_associate_public_ip_address
      - # IP of CodeBuild instance for use by security group, so only open to one machine
      - TF_VAR_tfi_cb_ip="$(curl http://checkip.amazonaws.com)" ; export TF_VAR_tfi_cb_ip
      - echo "IP of CodeBuild instance is $TF_VAR_tfi_cb_ip"
      - TF_VAR_tfi_win_instance_type="${TFI_WIN_INSTANCE_TYPE}" ; export TF_VAR_tfi_win_instance_type
      - TF_VAR_tfi_lx_instance_type="${TFI_LX_INSTANCE_TYPE}" ; export TF_VAR_tfi_lx_instance_type
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - AWS key setup........................................................"      
      - TF_VAR_tfi_key_pair_name="${TFI_KEY_PAIR_NAME}" ; export TF_VAR_tfi_key_pair_name
      - TF_VAR_tfi_ssh_user="${TFI_SSH_USER}" ; export TF_VAR_tfi_ssh_user
      - TF_VAR_tfi_rm_user="${TFI_WINRM_USER}" ; export TF_VAR_tfi_rm_user
      - TF_VAR_tfi_rm_pass="$(aws ssm get-parameters --name ${TFI_PS_PASSWD_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_tfi_rm_pass
      - TF_VAR_tfi_private_key="$(aws ssm get-parameters --name ${TFI_PS_PRIVATE_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_tfi_private_key
      - TF_VAR_tfi_public_key="$(aws ssm get-parameters --name ${TFI_PS_PUBLIC_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_tfi_public_key
      - |
        if aws ec2 describe-key-pairs --key-name "${TFI_KEY_PAIR_NAME}" ; then
          echo "Key pair already exists..."
        else
          echo "Creating a key pair "
          aws ec2 import-key-pair --key-name "${TFI_KEY_PAIR_NAME}" --public-key-material "${TF_VAR_tfi_public_key}"
        fi
      - #-------------------------------------------------------------------------------------------------
      - echo "SETUP - AWS security groups.................................................."
      - # names to be used when creating security groups
      - TF_VAR_tfi_win_security_group="${TFI_WIN_SECURITY_GRP}" ; export TF_VAR_tfi_win_security_group
      - TF_VAR_tfi_lx_security_group="${TFI_LX_SECURITY_GRP}" ; export TF_VAR_tfi_lx_security_group
      - TFI_LX_SG_ID="$(aws ec2 describe-security-groups --group-names "${TFI_LX_SECURITY_GRP}" | ./jq.dms -r '.SecurityGroups[0].GroupId')"
      - |
        if [ "${TFI_LX_SG_ID}" != "null" ] && [ -n "${TFI_LX_SG_ID}" ] ; then
          aws ec2 delete-security-group --group-id "${TFI_LX_SG_ID}"
        fi
      - TFI_WIN_SG_ID="$(aws ec2 describe-security-groups --group-names "${TFI_WIN_SECURITY_GRP}" | ./jq.dms -r '.SecurityGroups[0].GroupId')"
      - |
        if [ "${TFI_WIN_SG_ID}" != "null" ] && [ -n "${TFI_WIN_SG_ID}" ] ; then
          aws ec2 delete-security-group --group-id "${TFI_WIN_SG_ID}"
        fi        
      - #-------------------------------------------------------------------------------------------------
      - # "Creative" variable substitution required since windows userdata has chars that won't work with automatic method
      - # Should do this late in setup so that all variables needed are ready
      - echo "SETUP - userdata files......................................................."   
      - sed -i -e '/WATCHMAKER_INSTALL_GOES_HERE/{r windows/install_watchmaker.ps1' -e 'd}' windows/userdata.ps1
      - sed -i "s/THIS_IS_NOT_THE_PASSWORD/${TF_VAR_tfi_term_passwd}/" windows/userdata.ps1
      - sed -i "s,THIS_IS_NOT_THE_REPO,${TFI_GIT_REPO}," windows/userdata.ps1
      - TF_VAR_tfi_repo="${TFI_REPO}" ; export TF_VAR_tfi_repo
      - TF_VAR_tfi_branch="${TFI_BRANCH}" ; export TF_VAR_tfi_branch
      - TF_VAR_tfi_common_args="${TFI_COMMON_ARGS}" ; export TF_VAR_tfi_common_args
      - TF_VAR_tfi_win_args="${TFI_WIN_ARGS}" ; export TF_VAR_tfi_win_args
      - TF_VAR_tfi_lx_args="${TFI_LX_ARGS}" ; export TF_VAR_tfi_lx_args
      - TF_VAR_tfi_rm_user="${TFI_RM_USER}" ; export TF_VAR_tfi_rm_user
      - sed -i "s/THIS_IS_NOT_THE_BRANCH/${TFI_GIT_BRANCH}/" windows/userdata.ps1
      - sed -i "s/WINRM_USER_GOES_HERE/${TFI_WINRM_USER}/" windows/userdata.ps1
      - sed -i "s^COMMON_COMMAND_LINE_ARGUMENTS_GO_HERE^${TFI_COMMON_WM_ARGS}^" windows/userdata.ps1
      - sed -i "s^WIN_COMMAND_LINE_ARGUMENTS_GO_HERE^${TFI_WIN_WM_ARGS}^" windows/userdata.ps1
      - sed -i -e '/WATCHMAKER_INSTALL_GOES_HERE/{r linux/install_watchmaker.sh' -e 'd}' linux/userdata.sh
      - sed -i "s,THIS_IS_NOT_THE_REPO,${TFI_GIT_REPO}," linux/userdata.sh
      - sed -i "s/THIS_IS_NOT_THE_BRANCH/${TFI_GIT_BRANCH}/" linux/userdata.sh
      - sed -i "s^COMMON_COMMAND_LINE_ARGUMENTS_GO_HERE^${TFI_COMMON_WM_ARGS}^" linux/userdata.sh
      - sed -i "s^LX_COMMAND_LINE_ARGUMENTS_GO_HERE^${TFI_LX_WM_ARGS}^" linux/userdata.sh
      - #-------------------------------------------------------------------------------------------------  
      - echo "Throwing it over the fence to Terraform......................................"
      - echo "Initializing Terraform " ; ./terraform init -input=false
      - echo "Importing key pair " ; ./terraform import aws_key_pair.auth "${TFI_KEY_PAIR_NAME}"
      - echo "Create provisiong plan " ; ./terraform plan -out=tfplan -input=false
  build:
    commands:
      - echo "Applying Terraform plan (which installs watchmaker) "
      - echo "NOTE, this will fail if remote execute calls fail"
      - ./terraform apply -input=false tfplan
      - #./terraform state pull -target=aws_instance.windows -input=false
      - #AWS_INSTANCE_STATE="$(./terraform state pull -target=aws_instance.windows -input=false)" ; export AWS_INSTANCE_STATE
      - #AWS_INSTANCE_ID="$(echo $AWS_INSTANCE_STATE | ./jq.dms -r '.modules[0].resources."aws_instance.windows".primary.id')" ; export AWS_INSTANCE_ID
      - #AWS_INSTANCE_IP="$(echo $AWS_INSTANCE_STATE | ./jq.dms -r '.modules[0].resources."aws_instance.windows".primary.attributes.public_ip')" ; export AWS_INSTANCE_IP
  post_build:
    commands:
      - |
        if [ "${TFI_DESTROY_AFTER_TEST}" = "true" ]; then
          echo "Destroying Terraform-created resources (e.g., security groups, instances, key pair)..."
          ./terraform destroy -input=false -force
          if aws ec2 describe-key-pairs --key-name "${TFI_KEY_PAIR_NAME}" ; then
            echo "Deleting key pair..."
            aws ec2 delete-key-pair --key-name "${TFI_KEY_PAIR_NAME}"
          fi
        else
          echo "********* WARNING *********"
          echo "NOT destroying resources!"
          echo "Expensive AWS resources are still up and running and need to be terminated/deleted manually."
          echo "***************************"
        fi
      - echo "Terrafirm completed on $(date)"
artifacts:
  files:
    - '**/*'
