---
version: 0.2

env:
  variables:
    TF_ZIP: https://releases.hashicorp.com/terraform/0.11.1/terraform_0.11.1_linux_amd64.zip
    TERRAFIRM_DESC_URL: https://github.com/YakDriver/terrafirm_win
    #JQ_INSTALL: https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64

phases:
  install:
    commands:
      - echo "Installing unzip............"
      - apt -y install unzip
      - #echo "Installing jq..............."
      - #curl -L "${JQ_INSTALL}" -o jq.dms && chmod +x jq.dms
      - #./jq.dms --version
      - echo "Installing Terraform..."
      - echo `pwd`
      - curl -L "${TF_ZIP}" -o tf.zip && unzip tf.zip
      - echo "Installed Terraform."
  pre_build:
    commands:
      - |
        if [ -z "${NAMED_PROFILE}" ]
        then
          echo "No named profile given, using default (terrafirm)..."
          NAMED_PROFILE=terrafirm
        else
          NAMED_PROFILE="${NAMED_PROFILE}"
        fi
        export NAMED_PROFILE
        echo "AWS profile is $NAMED_PROFILE"
      - |
        if [ -n "${REGION}" ]
        then
          aws configure set region $REGION --profile $NAMED_PROFILE
        fi
      - echo "AWS Profile setup..."
      - AWS_PROFILE=$NAMED_PROFILE ; export AWS_PROFILE
      - echo "Terraform version " ; ./terraform --version
      - TF_VAR_cb_ip="$(curl http://checkip.amazonaws.com)" ; export TF_VAR_cb_ip
      - echo "IP of CodeBuild instance is $TF_VAR_cb_ip"
      - TF_VAR_key_pair_name="${KEY_PAIR_NAME}" ; export TF_VAR_key_pair_name
      - TF_VAR_term_user="${WINRM_USER}" ; export TF_VAR_term_user
      - TF_VAR_term_passwd="$(aws ssm get-parameters --name ${PS_PASSWD_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_term_passwd
      - TF_VAR_ssh_user="${SSH_USER}" ; export TF_VAR_ssh_user
      - TF_VAR_private_key="$(aws ssm get-parameters --name ${PS_SSH_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_private_key
      - TF_VAR_public_key="$(aws ssm get-parameters --name ${PS_PUBLIC_KEY} --with-decryption --query 'Parameters[0].Value' --out text)" ; export TF_VAR_public_key
      - | #avoid errors with invalid parameter values - only will show up as "true" or "false"
        if [ "${ASSIGN_PUBLIC_IP}" = "true" ] ; then
          TF_VAR_associate_public_ip_address="${ASSIGN_PUBLIC_IP}"
        else
          TF_VAR_associate_public_ip_address="false"
        fi
        export TF_VAR_associate_public_ip_address
      - TF_VAR_security_group_win="${SECURITY_GRP_WIN}" ; export TF_VAR_security_group_win
      - TF_VAR_security_group_lin="${SECURITY_GRP_LIN}" ; export TF_VAR_security_group_lin
      - #"Creative" variable substitution required since windows userdata has chars that won't work with automatic method
      - sed -i -e '/WATCHMAKER_INSTALL_GOES_HERE/{r windows/install_watchmaker.ps1' -e 'd}' windows/userdata.ps1
      - cat windows/userdata.ps1
      - exit 1
      - sed -i "s/THIS_IS_NOT_THE_PASSWORD/${TF_VAR_term_passwd}/" windows/userdata.ps1
      - sed -i "s,THIS_IS_NOT_THE_REPO,${GIT_REPO}," windows/userdata.ps1
      - sed -i "s/THIS_IS_NOT_THE_BRANCH/${GIT_BRANCH}/" windows/userdata.ps1
      - sed -i "s,THIS_IS_NOT_THE_REPO,${GIT_REPO}," linux/userdata.sh
      - sed -i "s/THIS_IS_NOT_THE_BRANCH/${GIT_BRANCH}/" linux/userdata.sh
      - |
        if aws ec2 describe-key-pairs --key-name "${KEY_PAIR_NAME}" ; then
          echo "Key pair already exists..."
        else
          echo "Creating a key pair "
          aws ec2 import-key-pair --key-name "${KEY_PAIR_NAME}" --public-key-material "${TF_VAR_public_key}"
        fi
      - echo "Initializing Terraform " ; ./terraform init -input=false
      - echo "Importing key pair " ; ./terraform import aws_key_pair.auth "${KEY_PAIR_NAME}"
      - echo "Create provisiong plan " ; ./terraform plan -out=tfplan -input=false
  build:
    commands:
      - echo "Applying Terraform plan (which installs watchmaker) "
      - echo "NOTE, this will fail if remote execute calls fail"
      - ./terraform apply -input=false tfplan
      - #./terraform state pull -target=aws_instance.windows -input=false
      - #AWS_INSTANCE_STATE="$(./terraform state pull -target=aws_instance.windows -input=false)" ; export AWS_INSTANCE_STATE
      - #AWS_INSTANCE_ID="$(echo $AWS_INSTANCE_STATE | ./jq.dms -r '.modules[0].resources."aws_instance.windows".primary.id')" ; export AWS_INSTANCE_ID
      - #AWS_INSTANCE_IP="$(echo $AWS_INSTANCE_STATE | ./jq.dms -r '.modules[0].resources."aws_instance.windows".primary.attributes.public_ip')" ; export AWS_INSTANCE_IP
  post_build:
    commands:
      - |
        if [ "${DESTROY_AFTER_TEST}" = "true" ]; then
          echo "Destroying Terraform-created resources (e.g., security groups, instances, key pair)..."
          ./terraform destroy -input=false -force
          if aws ec2 describe-key-pairs --key-name "${KEY_PAIR_NAME}" ; then
            echo "Deleting key pair..."
            aws ec2 delete-key-pair --key-name "${KEY_PAIR_NAME}"
          fi
        else
          echo "********* WARNING *********"
          echo "NOT destroying resources!"
          echo "Expensive AWS resources are still up and running and need to be terminated/deleted manually."
          echo "***************************"
        fi
      - echo "Terrafirm completed on $(date)"
artifacts:
  files:
    - '**/*'
